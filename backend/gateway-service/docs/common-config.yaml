# =================================================================
# 通用配置 - Common Configuration (Nacos版本)
# 服务名称: gateway-service
# 配置组: gateway-service
# 适用于: 所有环境的基础配置
# =================================================================

# 基础应用配置
spring:
  application:
    name: gateway-service

  # Spring Cloud 配置
  cloud:
    # Sentinel 流量控制配置
    sentinel:
      transport:
        dashboard: localhost:8858
        port: 8719
      eager: true
      datasource:
        flow-rules:
          nacos:
            server-addr: localhost:8848
            data-id: sentinel-gateway-service-flow-rules
            group-id: DEFAULT_GROUP
            rule-type: flow
            data-type: json
        degrade-rules:
          nacos:
            server-addr: localhost:8848
            data-id: sentinel-gateway-service-degrade-rules
            group-id: DEFAULT_GROUP
            rule-type: degrade
            data-type: json

# 业务配置
cex:
  # 网关配置
  gateway:
    enabled: true
    mode: production
    instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}
    cluster: default
    zone: default

    # 网关元数据
    metadata:
      version: 1.0.0
      author: PPCEX Team
      description: PPCEX API Gateway Service
      build-time: ${build.time}
      git-commit: ${git.commit.id}
      git-branch: ${git.branch}

    # 网关特性配置
    features:
      enabled: true
      routes: true
      load-balancer: true
      circuit-breaker: true
      rate-limit: true
      authentication: true
      authorization: true
      caching: true
      monitoring: true
      logging: true
      tracing: true
      metrics: true

    # 网关性能配置
    performance:
      max-connections: 10000
      max-requests-per-connection: 1000
      connection-timeout: 30s
      read-timeout: 30s
      write-timeout: 30s
      idle-timeout: 60s
      buffer-size: 16KB
      max-header-size: 8KB
      max-initial-line-length: 4096

# 监控配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,gateway,env,beans
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
    gateway:
      enabled: true
      routes:
        enabled: true
      global-filters:
        enabled: true
      predicates:
        enabled: true
    metrics:
      enabled: true
      export:
        prometheus:
          enabled: true
    info:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
      profile: ${spring.profiles.active}
      instance: ${spring.cloud.client.ip-address}:${server.port}
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
        gateway.requests: true
        gateway.response.time: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
        gateway.requests: 0.5, 0.95, 0.99
        gateway.response.time: 0.5, 0.95, 0.99
    web:
      server:
        request:
          autotime:
            enabled: true

# 日志配置
logging:
  level:
    root: INFO
    com.ppcex.gateway: INFO
    com.ppcex.common: INFO
    org.springframework.cloud.gateway: DEBUG
    org.springframework.web.reactive: DEBUG
    org.springframework.cloud: WARN
    com.alibaba.nacos.client: WARN
    io.lettuce.core: WARN
    reactor.netty: WARN
    org.springframework.security: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] [%X{traceId}] [%X{spanId}] [%X{parentId}] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] [%X{traceId}] [%X{spanId}] [%X{parentId}] %-5level %logger{36} - %msg%n"
  file:
    name: logs/gateway-service.log
    max-size: 100MB
    max-history: 30
    total-size-cap: 1GB
  logback:
    rollingpolicy:
      max-file-size: 100MB
      max-history: 30
      total-size-cap: 1GB
      clean-history-on-start: false

# 线程池配置
thread-pool:
  # 核心线程池
  core:
    core-size: 20
    max-size: 100
    queue-capacity: 2000
    keep-alive-seconds: 60
    thread-name-prefix: gateway-core-
    allow-core-thread-timeout: true
    prestart-all-core-threads: false

  # 异步处理线程池
  async:
    core-size: 10
    max-size: 50
    queue-capacity: 1000
    keep-alive-seconds: 60
    thread-name-prefix: gateway-async-
    rejection-policy: CALLER_RUNS

  # 事件循环线程池
  event-loop:
    core-size: 4
    max-size: 8
    queue-capacity: 1000
    keep-alive-seconds: 60
    thread-name-prefix: gateway-event-loop-

  # 监控线程池
  monitoring:
    core-size: 2
    max-size: 5
    queue-capacity: 100
    keep-alive-seconds: 60
    thread-name-prefix: gateway-monitoring-

# 缓存配置
cache:
  # 本地缓存配置
  local:
    enabled: true
    maximum-size: 5000
    expire-after-write: 300 # 5分钟
    expire-after-access: 600 # 10分钟

  # Redis缓存配置
  redis:
    enabled: true
    default-expiration: 3600 # 1小时
    key-prefix: "gateway:"
    use-key-prefix: true
    cache-null-values: false
    time-to-live: 3600000

  # 缓存名称配置
  caches:
    routes:
      ttl: 1800 # 30分钟
      maximum-size: 1000
    auth:
      ttl: 3600 # 1小时
      maximum-size: 5000
    permissions:
      ttl: 600 # 10分钟
      maximum-size: 2000
    rate-limit:
      ttl: 60 # 1分钟
      maximum-size: 10000
    config:
      ttl: 600 # 10分钟
      maximum-size: 100

# 健康检查配置
health:
  enabled: true
  endpoints:
    - "/actuator/health"
    - "/actuator/health/liveness"
    - "/actuator/health/readiness"
  check-interval: 30s
  timeout: 10s
  retry-count: 3
  retry-interval: 5s

# 链路追踪配置
tracing:
  enabled: true
  sampling:
    probability: 1.0 # 100%采样
  propagation:
    type: w3c
    baggage:
      enabled: true
      remote-fields: ["user-id", "request-id"]
  export:
    otlp:
      endpoint: http://localhost:4318
      protocol: grpc

# 分布式追踪配置
distributed-tracing:
  enabled: true
  provider: jaeger
  service-name: ${spring.application.name}
  sample-rate: 1.0
  reporter:
    type: http
    endpoint: http://localhost:14268/api/traces
    batch-size: 100
    flush-interval: 1000ms
    max-queue-size: 10000

# 指标配置
metrics:
  enabled: true
  export:
    prometheus:
      enabled: true
      endpoint: /actuator/prometheus
      push-enabled: false
      push-endpoint: http://localhost:9091/metrics/job/gateway-service
      push-interval: 30s
  tags:
    application: ${spring.application.name}
    profile: ${spring.profiles.active}
    instance: ${spring.cloud.client.ip-address}:${server.port}
    version: 1.0.0

# 告警配置
alerts:
  enabled: true
  rules:
    - name: "high-error-rate"
      condition: "error_rate > 0.05" # 5%错误率
      duration: 300 # 5分钟
      severity: "high"
      channels: ["email", "webhook"]
      message: "网关服务错误率过高"

    - name: "slow-response"
      condition: "avg_response_time > 1000" # 1秒平均响应时间
      duration: 300
      severity: "medium"
      channels: ["email"]
      message: "网关服务响应缓慢"

    - name: "high-connection"
      condition: "active_connections > 1000" # 1000个活跃连接
      duration: 180
      severity: "medium"
      channels: ["email"]
      message: "网关服务连接数过高"

# 优雅关闭配置
shutdown:
  enabled: true
  timeout: 30s
  graceful-shutdown: true
  await-termination: true
  await-termination-period: 30s

# 应用信息配置
info:
  app:
    name: ${spring.application.name}
    version: 1.0.0
    description: PPCEX API Gateway Service
  build:
    artifact: ${project.artifactId}
    name: ${project.name}
    version: ${project.version}
    time: ${build.time}
  env:
    active: ${spring.profiles.active}
    region: default
    zone: default
    datacenter: default
  management:
    health:
      enabled: true
    metrics:
      enabled: true
    endpoints:
      web:
        exposure:
          include: "*"

# 环境特定配置注释
# =================================================================
# 不同环境需要覆盖的配置示例：
#
# 开发环境 (common-config-dev.yaml):
# - logging.level.com.ppcex.gateway: DEBUG
# - tracing.sampling.probability: 1.0
# - metrics.export.prometheus.push-enabled: false
#
# 测试环境 (common-config-test.yaml):
# - logging.level.com.ppcex.gateway: INFO
# - tracing.sampling.probability: 0.1
# - alerts.enabled: true
#
# 生产环境 (common-config-prod.yaml):
# - logging.level.com.ppcex.gateway: WARN
# - tracing.sampling.probability: 0.01
# - alerts.enabled: true
# - shutdown.timeout: 60s
# =================================================================