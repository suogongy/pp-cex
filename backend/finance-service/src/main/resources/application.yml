# =================================================================
# Spring Boot 3.1.5 + Spring Cloud 2022.0.4 + Spring Cloud Alibaba 2022.0.0.0
# 服务名称: finance-service
# 环境配置: test
# =================================================================

spring:
  # 应用基础配置
  application:
    name: finance-service
  profiles:
    active: dev
  main:
    allow-bean-definition-overriding: true
    lazy-initialization: false
    banner-mode: "off"

  # 配置中心
  config:
    import:
      - optional:nacos:finance-common-config.yaml
      - optional:nacos:finance-mysql-config.yaml
      - optional:nacos:finance-redis-config.yaml
      - optional:nacos:finance-rocketmq-config.yaml

  # 服务注册与发现
  cloud:
    nacos:
      discovery:
        server-addr: ${NACOS_SERVER_ADDR:localhost:8848}
        namespace: public
        group: DEFAULT_GROUP
        metadata:
          version: 1.0.0
          context-path: /finance
          preserved.heart.beat.interval: 5000
          preserved.heart.beat.timeout: 15000
          preserved.ip.delete.timeout: 30000
      config:
        enabled: true
        server-addr: ${NACOS_SERVER_ADDR:localhost:8848}
        namespace: public
        group: DEFAULT_GROUP
        file-extension: yaml
        refresh-enabled: true
        shared-configs:
          - data-id: common-config.yaml
            group: DEFAULT_GROUP
            refresh: true

    # Sentinel 流量控制
    sentinel:
      transport:
        dashboard: ${SENTINEL_DASHBOARD:localhost:8080}
        port: 8719
        client-ip: ${spring.cloud.client.ip-address}
      eager: true
      datasource:
        flow-rules:
          nacos:
            server-addr: ${NACOS_SERVER_ADDR:localhost:8848}
            dataId: sentinel-finance-service-flow-rules.json
            groupId: DEFAULT_GROUP
            rule-type: flow
            data-type: json
        degrade-rules:
          nacos:
            server-addr: ${NACOS_SERVER_ADDR:localhost:8848}
            dataId: sentinel-finance-service-degrade-rules.json
            groupId: DEFAULT_GROUP
            rule-type: degrade
            data-type: json

  # 数据源配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ppcex_finance?useSSL=false&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true&allowPublicKeyRetrieval=true&autoReconnect=true&failOverReadOnly=false&maxReconnects=3
    username: root
    password: root123
    druid:
      initial-size: 10
      max-active: 100
      min-idle: 10
      max-wait: 60000
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        login-username: admin
        login-password: admin
      filter:
        stat:
          log-slow-sql: true
          slow-sql-millis: 1000
          merge-sql: false
        wall:
          config:
            multi-statement-allow: true

  # Redis 配置
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:redis123456}
      database: ${REDIS_DATABASE:1}
      username: ${REDIS_USERNAME:cex_finance}
      timeout: 10000ms
      connect-timeout: 10000ms
      lettuce:
        pool:
          max-active: 200
          max-wait: -1ms
          max-idle: 20
          min-idle: 0
          time-between-eviction-runs: 30000ms
      client-name: finance-service-redis-client

  # 缓存配置
  cache:
    type: redis
    redis:
      time-to-live: 3600000
      cache-null-values: false
      key-prefix: "finance:"
      use-key-prefix: true

  # RocketMQ 配置
  rocketmq:
    name-server: ${ROCKETMQ_NAMESRV:localhost:9876}
    producer:
      group: finance-producer
      send-message-timeout: 3000
      retry-times-when-send-failed: 3
      retry-next-server: true
    consumer:
      # 资产变动消息消费者
      finance-asset-consumer:
        group: finance-asset-consumer
        topic: asset-topic
        selector-expression: ASSET_CHANGE
        consume-thread-min: 20
        consume-thread-max: 64
        pull-batch-size: 32
      # 风控告警消息消费者
      finance-risk-consumer:
        group: finance-risk-consumer
        topic: risk-topic
        selector-expression: RISK_ALERT
        consume-thread-min: 10
        consume-thread-max: 32
        pull-batch-size: 16

  # 线程池配置
  task:
    execution:
      pool:
        core-size: 10
        max-size: 50
        queue-capacity: 1000
        keep-alive: 60s
        thread-name-prefix: finance-service-task-
    scheduling:
      pool:
        size: 5
        thread-name-prefix: finance-service-scheduling-

# Web服务器配置
server:
  port: 8005
  servlet:
    context-path: /finance
  tomcat:
    threads:
      max: 200
      min-spare: 10
    accept-count: 100
    connection-timeout: 20000
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json

# 业务配置
cex:
  jwt:
    enabled: true
    secret: ${JWT_SECRET:your-jwt-secret-key-at-least-32-bytes-long-for-security}
    expiration: 86400000
    refresh-expiration: 604800000
    issuer: PPCEX

  finance:
    asset:
      daily-limit: 1000000
      risk-threshold: 100000
      auto-approve-amount: 10000

    report:
      schedule: "0 0 2 * * ?"
      retention-days: 365

    risk:
      enabled: true
      alert-threshold: 50000
      block-threshold: 100000

# 安全配置
security:
  permit-all:
    - /finance/api/v1/public/**
    - /finance/doc.html
    - /finance/swagger-ui/**
    - /finance/v3/api-docs/**
    - /finance/actuator/**
    - /finance/druid/**

# 监控配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# 日志配置
logging:
  level:
    com.ppcex.finance: INFO
    org.springframework.security: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# MyBatis Plus 配置
mybatis-plus:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.ppcex.finance.entity
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: true
    lazy-loading-enabled: true
    multiple-result-sets-enabled: true
    use-column-label: true
    use-generated-keys: false
    auto-mapping-behavior: partial
    default-statement-timeout: 25000
    call-setters-on-nulls: false
    return-instance-for-empty-row: false
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl
    default-executor-type: reuse
    local-cache-scope: statement
  global-config:
    db-config:
      id-type: auto
      table-underline: true
      logic-delete-field: deleted
      logic-delete-value: 1
      logic-not-delete-value: 0
      table-prefix: ""
    banner: false

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui/index.html

# API文档配置
knife4j:
  enable: true
  setting:
    language: zh_cn
    enableSwaggerModels: true
    enableDocumentManage: true
    swaggerModelName: 实体类列表
  info:
    title: PPCEX Finance Service API
    description: 财务服务API文档
    email: support@ppcex.com
    concat: PPCEX Team
    url: https://www.ppcex.com
    version: v1.0.0