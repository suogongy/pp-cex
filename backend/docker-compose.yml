services:
  # MySQL数据库
  mysql-master:
    image: mysql:8.0
    container_name: mysql-master
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-cex_db}
      MYSQL_USER: ${MYSQL_USER:-cex_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-cex123}
    volumes:
      - mysql-master-data:/var/lib/mysql
      - ./docker/mysql/master.cnf:/etc/mysql/conf.d/master.cnf
      - ../sql:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    networks:
      - cex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  mysql-slave:
    image: mysql:8.0
    container_name: mysql-slave
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-cex_db}
      MYSQL_USER: ${MYSQL_USER:-cex_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-cex123}
    volumes:
      - mysql-slave-data:/var/lib/mysql
      - ./docker/mysql/slave.cnf:/etc/mysql/conf.d/slave.cnf
    ports:
      - "3307:3306"
    networks:
      - cex-network
    restart: unless-stopped
    depends_on:
      - mysql-master
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis集群
  redis-node1:
    image: redis:7-alpine
    container_name: redis-node1
    command: redis-server /etc/redis/redis.conf
    volumes:
      - ./docker/redis/redis-node1.conf:/etc/redis/redis.conf
      - redis-node1-data:/data
    ports:
      - "6379:6379"
    networks:
      - cex-network
    restart: unless-stopped

  redis-node2:
    image: redis:7-alpine
    container_name: redis-node2
    command: redis-server /etc/redis/redis.conf
    volumes:
      - ./docker/redis/redis-node2.conf:/etc/redis/redis.conf
      - redis-node2-data:/data
    ports:
      - "6380:6379"
    networks:
      - cex-network
    restart: unless-stopped

  redis-node3:
    image: redis:7-alpine
    container_name: redis-node3
    command: redis-server /etc/redis/redis.conf
    volumes:
      - ./docker/redis/redis-node3.conf:/etc/redis/redis.conf
      - redis-node3-data:/data
    ports:
      - "6381:6379"
    networks:
      - cex-network
    restart: unless-stopped

  # Redis集群初始化
  redis-cluster-init:
    image: redis:7-alpine
    container_name: redis-cluster-init
    depends_on:
      - redis-node1
      - redis-node2
      - redis-node3
    command: |
      sh -c "
      sleep 10 &&
      redis-cli --cluster create \
        redis-node1:6379 \
        redis-node2:6379 \
        redis-node3:6379 \
        --cluster-replicas 0 \
        --cluster-yes
      "
    networks:
      - cex-network
    profiles:
      - cluster

  # RocketMQ NameServer
  rocketmq-nameserver:
    image: apache/rocketmq:4.9.4
    container_name: rocketmq-nameserver
    command: sh mqnamesrv
    volumes:
      - rocketmq-nameserver-logs:/home/rocketmq/logs
    ports:
      - "9876:9876"
    networks:
      - cex-network
    restart: unless-stopped

  # RocketMQ Broker
  rocketmq-broker-a:
    image: apache/rocketmq:4.9.4
    container_name: rocketmq-broker-a
    command: sh mqbroker -n rocketmq-nameserver:9876 -c /etc/rocketmq/broker-a.conf
    volumes:
      - rocketmq-broker-a-logs:/home/rocketmq/logs
      - rocketmq-broker-a-store:/home/rocketmq/store
      - ./docker/rocketmq/broker-a.conf:/etc/rocketmq/broker-a.conf
    ports:
      - "10909:10909"
      - "10911:10911"
    networks:
      - cex-network
    restart: unless-stopped
    depends_on:
      - rocketmq-nameserver

  # RocketMQ Broker-b
  rocketmq-broker-b:
    image: apache/rocketmq:4.9.4
    container_name: rocketmq-broker-b
    command: sh mqbroker -n rocketmq-nameserver:9876 -c /etc/rocketmq/broker-b.conf
    volumes:
      - rocketmq-broker-b-logs:/home/rocketmq/logs
      - rocketmq-broker-b-store:/home/rocketmq/store
      - ./docker/rocketmq/broker-b.conf:/etc/rocketmq/broker-b.conf
    ports:
      - "10919:10909"
      - "10921:10911"
    networks:
      - cex-network
    restart: unless-stopped
    depends_on:
      - rocketmq-nameserver

  # RocketMQ Console
  rocketmq-console:
    image: styletang/rocketmq-console-ng
    container_name: rocketmq-console
    environment:
      JAVA_OPTS: "-Drocketmq.namesrv.addr=rocketmq-nameserver:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false"
    ports:
      - "8080:8080"
    networks:
      - cex-network
    restart: unless-stopped
    depends_on:
      - rocketmq-nameserver

  # Nacos
  nacos:
    image: nacos/nacos-server:v3.0.3
    container_name: nacos
    environment:
      MODE: cluster
      SPRING_DATASOURCE_PLATFORM: mysql
      MYSQL_SERVICE_HOST: mysql-master
      MYSQL_SERVICE_PORT: 3306
      MYSQL_SERVICE_DB_NAME: nacos
      MYSQL_SERVICE_USER: ${MYSQL_USER:-cex_user}
      MYSQL_SERVICE_PASSWORD: ${MYSQL_PASSWORD:-cex123}
      NACOS_SERVERS: "nacos:8848"
      NACOS_SERVER_PORT: 8848
      PREFER_HOST_MODE: hostname
    volumes:
      - nacos-logs:/home/nacos/logs
    ports:
      - "8848:8848"
    networks:
      - cex-network
    restart: unless-stopped
    depends_on:
      - mysql-master

  # Sentinel
  sentinel:
    image: bladex/sentinel-dashboard:1.8.6
    container_name: sentinel
    environment:
      JAVA_OPTS: "-Dserver.port=8858 -Dcsp.sentinel.dashboard.server=localhost:8858 -Dcsp.sentinel.api.port=8719"
    ports:
      - "8858:8858"
    networks:
      - cex-network
    restart: unless-stopped

  # Seata
  seata:
    image: seataio/seata-server:1.6.1
    container_name: seata
    environment:
      SEATA_IP: seata
      SEATA_PORT: 8091
      SEATA_CONFIG_NAME: file
      SEATA_STORE_MODE: db
      SEATA_STORE_DB_DRIVER: com.mysql.cj.jdbc.Driver
      SEATA_STORE_DB_URL: jdbc:mysql://mysql-master:3306/seata?useSSL=false&serverTimezone=UTC
      SEATA_STORE_DB_USER: ${MYSQL_USER:-cex_user}
      SEATA_STORE_DB_PASSWORD: ${MYSQL_PASSWORD:-cex123}
    ports:
      - "8091:8091"
    networks:
      - cex-network
    restart: unless-stopped
    depends_on:
      - mysql-master

  # Nginx
  nginx:
    image: nginx:alpine
    container_name: nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - nginx-logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - cex-network
    restart: unless-stopped

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - cex-network
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - cex-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - cex-network
    restart: unless-stopped

  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: logstash
    volumes:
      - ./docker/logstash/pipeline.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
    networks:
      - cex-network
    restart: unless-stopped
    depends_on:
      - elasticsearch

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - cex-network
    restart: unless-stopped
    depends_on:
      - elasticsearch

volumes:
  mysql-master-data:
  mysql-slave-data:
  redis-node1-data:
  redis-node2-data:
  redis-node3-data:
  rocketmq-nameserver-logs:
  rocketmq-broker-a-logs:
  rocketmq-broker-a-store:
  rocketmq-broker-b-logs:
  rocketmq-broker-b-store:
  nacos-logs:
  nginx-logs:
  prometheus-data:
  grafana-data:
  elasticsearch-data:

networks:
  cex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16