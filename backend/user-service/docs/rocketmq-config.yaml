# =================================================================
# RocketMQ 消息队列配置 - RocketMQ Message Queue Configuration
# 服务名称: user-service
# 配置组: user-service
# 适用于: 所有环境的RocketMQ配置
# =================================================================

# RocketMQ 基础配置
rocketmq:
  # NameServer 地址
  name-server: localhost:9876

  # 生产者配置
  producer:
    # 基础配置
    group: user-producer-group
    send-message-timeout: 3000           # 发送消息超时时间（毫秒）
    retry-times-when-send-failed: 3      # 同步发送失败重试次数
    retry-times-when-send-async-failed: 3 # 异步发送失败重试次数
    max-message-size: 4194304            # 消息最大大小（4MB）
    compress-message-body-threshold: 4096 # 消息压缩阈值（4KB）

    # 高级配置
    retry-next-server: false             # 失败是否重试下一个broker
    access-key: ""                       # 访问密钥
    secret-key: ""                       # 密钥
    use-tracing: true                    # 启用链路追踪
    namespace: ""                        # 命名空间
    instance-name: user-service-producer # 实例名称

    # 消息队列选择器
    message-queue-selector: org.apache.rocketmq.client.producer.selector.SelectMessageQueueByHash

    # 消息追踪配置
    enable-msg-trace: true               # 启用消息追踪
    customized-trace-topic: RMQ_SYS_TRACE_TOPIC # 自定义追踪主题

    # 消息发送钩子
    send-message-hooks:
      - com.ppcex.user.hook.UserMessageSendHook

    # 事务消息配置
    transaction:
      listener: com.ppcex.user.listener.UserTransactionListener
      check-immunity-time: 3000         # 事务消息回查间隔（毫秒）
      check-interval: 60000             # 事务消息回查时间间隔（毫秒）
      transaction-timeout: 60000        # 事务消息超时时间（毫秒）

  # 消费者配置
  consumer:
    # 基础配置
    pull-batch-size: 32                  # 批量拉取消息数量
    consume-thread-min: 20               # 最小消费线程数
    consume-thread-max: 64               # 最大消费线程数
    consume-timeout: 15                  # 消费超时时间（分钟）
    max-reconsume-times: 3               # 最大重试消费次数
    suspend-current-pull-time-millis: 1000 # 挂起当前拉取时间（毫秒）
    consume-message-batch-max-size: 1    # 批量消费消息最大数量

    # 高级配置
    access-key: ""                       # 访问密钥
    secret-key: ""                       # 密钥
    use-tracing: true                    # 启用链路追踪
    namespace: ""                        # 命名空间
    instance-name: user-service-consumer # 实例名称

    # 消息顺序配置
    orderly: false                       # 是否顺序消费
    consume-orderly: false               # 是否顺序消费（已废弃，使用orderly）

    # 消息队列分配策略
    allocate-message-queue-strategy: org.apache.rocketmq.client.consumer.rebalance.AllocateMessageQueueAveragely

    # 消息过滤配置
    filter:
      use-expression: true              # 是否使用表达式过滤
      expression-type: SQL92             # 过滤表达式类型

    # 消息拉取配置
    pull:
      interval: 1000                     # 拉取间隔（毫秒）
      threshold-for-queue-activity: 1000 # 队列活动阈值

    # 消息消费钩子
    consume-message-hooks:
      - com.ppcex.user.hook.UserMessageConsumeHook

    # 消息重试配置
    retry:
      delay-level: 1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h
      max-retry-times: 3
      back-off-policy: EXPONENTIAL

    # 消息轨迹配置
    enable-msg-trace: true               # 启用消息轨迹
    customized-trace-topic: RMQ_SYS_TRACE_TOPIC # 自定义轨迹主题

# 消息主题配置
rocketmq-topics:
  # 用户相关主题
  user:
    topic: user-topic
    tags:
      - USER_REGISTER
      - USER_LOGIN
      - USER_LOGOUT
      - USER_UPDATE
      - USER_DELETE
      - USER_LOCK
      - USER_UNLOCK
      - USER_KYC_SUBMIT
      - USER_KYC_APPROVE
      - USER_KYC_REJECT
    keys:
      - user_id
      - username
      - email
      - phone

  # 资产相关主题
  asset:
    topic: asset-topic
    tags:
      - ASSET_UPDATE
      - ASSET_FREEZE
      - ASSET_UNFREEZE
      - ASSET_TRANSFER
      - ASSET_DEPOSIT
      - ASSET_WITHDRAW
    keys:
      - user_id
      - currency
      - amount

  # KYC相关主题
  kyc:
    topic: kyc-topic
    tags:
      - KYC_SUBMITTED
      - KYC_PROCESSING
      - KYC_APPROVED
      - KYC_REJECTED
      - KYC_EXPIRED
    keys:
      - user_id
      - kyc_id
      - status

  # 通知相关主题
  notification:
    topic: notification-topic
    tags:
      - EMAIL_VERIFY
      - PHONE_VERIFY
      - SMS_NOTIFY
      - EMAIL_NOTIFY
      - PUSH_NOTIFY
    keys:
      - user_id
      - notification_type
      - template_code

# 消息消费者配置
rocketmq-consumers:
  # 用户消息消费者
  user-consumer:
    group: user-consumer-group
    topic: user-topic
    selector-expression: "*"
    consume-mode: CONCURRENTLY          # 消费模式：CONCURRENTLY, ORDERLY
    message-model: CLUSTERING           # 消息模型：CLUSTERING, BROADCASTING
    subscription: user-subscription
    listener-class: com.ppcex.user.listener.UserMessageListener

  # 资产消息消费者
  asset-consumer:
    group: asset-consumer-group
    topic: asset-topic
    selector-expression: "*"
    consume-mode: CONCURRENTLY
    message-model: CLUSTERING
    subscription: asset-subscription
    listener-class: com.ppcex.user.listener.AssetMessageListener

  # KYC消息消费者
  kyc-consumer:
    group: kyc-consumer-group
    topic: kyc-topic
    selector-expression: "*"
    consume-mode: CONCURRENTLY
    message-model: CLUSTERING
    subscription: kyc-subscription
    listener-class: com.ppcex.user.listener.KycMessageListener

  # 通知消息消费者
  notification-consumer:
    group: notification-consumer-group
    topic: notification-topic
    selector-expression: "*"
    consume-mode: CONCURRENTLY
    message-model: CLUSTERING
    subscription: notification-subscription
    listener-class: com.ppcex.user.listener.NotificationMessageListener

# 事务消息配置
rocketmq-transaction:
  enabled: true
  listener-class: com.ppcex.user.listener.UserTransactionListener
  check-immunity-time: 3000
  check-interval: 60000
  transaction-timeout: 60000

  # 事务主题配置
  topics:
    user-transaction:
      topic: user-transaction-topic
      producer-group: user-transaction-producer-group
      consumer-group: user-transaction-consumer-group
      listener-class: com.ppcex.user.listener.UserTransactionListener

# 消息追踪配置
rocketmq-trace:
  enabled: true
  topic: RMQ_SYS_TRACE_TOPIC
  producer-group: USER_TRACE_PRODUCER
  consumer-group: USER_TRACE_CONSUMER
  trace-bean-name: userTraceBean
  dispatcher-type: MEMORY
  resolve-ip: true
  enable-multi-instance: false

# 消息监控配置
rocketmq-monitor:
  enabled: true
  interval: 60  # 监控间隔（秒）
  metrics:
    - CONSUME_SUCCESS_MSG_COUNT
    - CONSUME_FAILED_MSG_COUNT
    - SEND_SUCCESS_MSG_COUNT
    - SEND_FAILED_MSG_COUNT
    - RT
    - CONSUME_RT
    - PULL_RT
    - PULL_MSG_SIZE
    - SEND_MSG_SIZE
    - CONSUME_MSG_SIZE
    - GROUP_GET_NUMS
    - GROUP_GET_LATENCY
    - TOPIC_PUT_NUMS
    - TOPIC_PUT_SIZE
    - GROUP_GET_LATENCY_BY_STORE

# 消息健康检查
rocketmq-health:
  enabled: true
  timeout: 3000
  check-topic: HEALTH_CHECK_TOPIC
  check-group: HEALTH_CHECK_GROUP
  check-message: "HEALTH_CHECK"

# 延迟消息配置
rocketmq-delay:
  enabled: true
  level: 1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h
  topic: DELAY_TOPIC
  max-delay-time: 7200000  # 最大延迟时间（2小时）

# 消息幂等性配置
rocketmq-idempotent:
  enabled: true
  key-generator: com.ppcex.user.idempotent.MessageKeyGenerator
  storage: redis
  redis-key-prefix: "msg:idempotent:"
  expire-time: 86400  # 24小时

# 消息重试配置
rocketmq-retry:
  enabled: true
  max-retry-times: 3
  retry-interval: 1000  # 重试间隔（毫秒）
  retry-policy: EXPONENTIAL  # 重试策略：FIXED, EXPONENTIAL
  backoff-multiplier: 2  # 指数退避倍数

# 消息死信队列配置
rocketmq-dlq:
  enabled: true
  topic: "%DLQ%"  # 死信队列主题前缀
  handle-policy: DISCARD  # 处理策略：DISCARD, DEAD_LETTER, RETRY
  max-retry-times: 3
  retry-interval: 1000

# 环境特定配置注释
# =================================================================
# 不同环境需要覆盖的配置示例：
#
# 开发环境 (rocketmq-config-dev.yaml):
# - rocketmq.name-server: dev-rocketmq-nameserver:9876
# - rocketmq.producer.group: user-producer-group-dev
#
# 测试环境 (rocketmq-config-test.yaml):
# - rocketmq.name-server: test-rocketmq-nameserver:9876
# - rocketmq.producer.group: user-producer-group-test
#
# 生产环境 (rocketmq-config-prod.yaml):
# - rocketmq.name-server: prod-rocketmq-cluster:9876
# - rocketmq.producer.access-key: ${ROCKETMQ_ACCESS_KEY}
# - rocketmq.producer.secret-key: ${ROCKETMQ_SECRET_KEY}
# - rocketmq-topics.user.topic: user-topic-prod
# =================================================================

# 消息模板配置示例
rocketmq-message-templates:
  user-register:
    topic: user-topic
    tag: USER_REGISTER
    keys: ["user_id", "username", "email"]
    delay-time: 0
    retry-times: 3

  user-login:
    topic: user-topic
    tag: USER_LOGIN
    keys: ["user_id", "username", "login_time"]
    delay-time: 0
    retry-times: 3

  kyc-submit:
    topic: kyc-topic
    tag: KYC_SUBMITTED
    keys: ["user_id", "kyc_id", "submit_time"]
    delay-time: 0
    retry-times: 3